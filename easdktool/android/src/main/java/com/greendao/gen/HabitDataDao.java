package com.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.easdktool.db.HabitData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HABIT_DATA".
*/
public class HabitDataDao extends AbstractDao<HabitData, Long> {

    public static final String TABLENAME = "HABIT_DATA";

    /**
     * Properties of entity HabitData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property HabitIcon = new Property(0, int.class, "habitIcon", false, "HABIT_ICON");
        public final static Property HabitState = new Property(1, int.class, "habitState", false, "HABIT_STATE");
        public final static Property Time_stamp = new Property(2, long.class, "time_stamp", true, "_id");
        public final static Property Begin_hour = new Property(3, int.class, "begin_hour", false, "BEGIN_HOUR");
        public final static Property Begin_minute = new Property(4, int.class, "begin_minute", false, "BEGIN_MINUTE");
        public final static Property End_hour = new Property(5, int.class, "end_hour", false, "END_HOUR");
        public final static Property End_minute = new Property(6, int.class, "end_minute", false, "END_MINUTE");
        public final static Property RedColor = new Property(7, int.class, "redColor", false, "RED_COLOR");
        public final static Property GreenColor = new Property(8, int.class, "greenColor", false, "GREEN_COLOR");
        public final static Property BlueColor = new Property(9, int.class, "blueColor", false, "BLUE_COLOR");
        public final static Property MContent = new Property(10, String.class, "mContent", false, "M_CONTENT");
    }


    public HabitDataDao(DaoConfig config) {
        super(config);
    }
    
    public HabitDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HABIT_DATA\" (" + //
                "\"HABIT_ICON\" INTEGER NOT NULL ," + // 0: habitIcon
                "\"HABIT_STATE\" INTEGER NOT NULL ," + // 1: habitState
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 2: time_stamp
                "\"BEGIN_HOUR\" INTEGER NOT NULL ," + // 3: begin_hour
                "\"BEGIN_MINUTE\" INTEGER NOT NULL ," + // 4: begin_minute
                "\"END_HOUR\" INTEGER NOT NULL ," + // 5: end_hour
                "\"END_MINUTE\" INTEGER NOT NULL ," + // 6: end_minute
                "\"RED_COLOR\" INTEGER NOT NULL ," + // 7: redColor
                "\"GREEN_COLOR\" INTEGER NOT NULL ," + // 8: greenColor
                "\"BLUE_COLOR\" INTEGER NOT NULL ," + // 9: blueColor
                "\"M_CONTENT\" TEXT);"); // 10: mContent
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HABIT_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, HabitData entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getHabitIcon());
        stmt.bindLong(2, entity.getHabitState());
        stmt.bindLong(3, entity.getTime_stamp());
        stmt.bindLong(4, entity.getBegin_hour());
        stmt.bindLong(5, entity.getBegin_minute());
        stmt.bindLong(6, entity.getEnd_hour());
        stmt.bindLong(7, entity.getEnd_minute());
        stmt.bindLong(8, entity.getRedColor());
        stmt.bindLong(9, entity.getGreenColor());
        stmt.bindLong(10, entity.getBlueColor());
 
        String mContent = entity.getMContent();
        if (mContent != null) {
            stmt.bindString(11, mContent);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, HabitData entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getHabitIcon());
        stmt.bindLong(2, entity.getHabitState());
        stmt.bindLong(3, entity.getTime_stamp());
        stmt.bindLong(4, entity.getBegin_hour());
        stmt.bindLong(5, entity.getBegin_minute());
        stmt.bindLong(6, entity.getEnd_hour());
        stmt.bindLong(7, entity.getEnd_minute());
        stmt.bindLong(8, entity.getRedColor());
        stmt.bindLong(9, entity.getGreenColor());
        stmt.bindLong(10, entity.getBlueColor());
 
        String mContent = entity.getMContent();
        if (mContent != null) {
            stmt.bindString(11, mContent);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 2);
    }    

    @Override
    public HabitData readEntity(Cursor cursor, int offset) {
        HabitData entity = new HabitData( //
            cursor.getInt(offset + 0), // habitIcon
            cursor.getInt(offset + 1), // habitState
            cursor.getLong(offset + 2), // time_stamp
            cursor.getInt(offset + 3), // begin_hour
            cursor.getInt(offset + 4), // begin_minute
            cursor.getInt(offset + 5), // end_hour
            cursor.getInt(offset + 6), // end_minute
            cursor.getInt(offset + 7), // redColor
            cursor.getInt(offset + 8), // greenColor
            cursor.getInt(offset + 9), // blueColor
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // mContent
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, HabitData entity, int offset) {
        entity.setHabitIcon(cursor.getInt(offset + 0));
        entity.setHabitState(cursor.getInt(offset + 1));
        entity.setTime_stamp(cursor.getLong(offset + 2));
        entity.setBegin_hour(cursor.getInt(offset + 3));
        entity.setBegin_minute(cursor.getInt(offset + 4));
        entity.setEnd_hour(cursor.getInt(offset + 5));
        entity.setEnd_minute(cursor.getInt(offset + 6));
        entity.setRedColor(cursor.getInt(offset + 7));
        entity.setGreenColor(cursor.getInt(offset + 8));
        entity.setBlueColor(cursor.getInt(offset + 9));
        entity.setMContent(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(HabitData entity, long rowId) {
        entity.setTime_stamp(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(HabitData entity) {
        if(entity != null) {
            return entity.getTime_stamp();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(HabitData entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
