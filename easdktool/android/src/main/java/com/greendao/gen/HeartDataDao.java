package com.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.easdktool.db.HeartData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HEART_DATA".
*/
public class HeartDataDao extends AbstractDao<HeartData, Long> {

    public static final String TABLENAME = "HEART_DATA";

    /**
     * Properties of entity HeartData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Time_stamp = new Property(0, long.class, "time_stamp", true, "_id");
        public final static Property Hr_value = new Property(1, int.class, "hr_value", false, "HR_VALUE");
    }


    public HeartDataDao(DaoConfig config) {
        super(config);
    }
    
    public HeartDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HEART_DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: time_stamp
                "\"HR_VALUE\" INTEGER NOT NULL );"); // 1: hr_value
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HEART_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, HeartData entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getTime_stamp());
        stmt.bindLong(2, entity.getHr_value());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, HeartData entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getTime_stamp());
        stmt.bindLong(2, entity.getHr_value());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public HeartData readEntity(Cursor cursor, int offset) {
        HeartData entity = new HeartData( //
            cursor.getLong(offset + 0), // time_stamp
            cursor.getInt(offset + 1) // hr_value
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, HeartData entity, int offset) {
        entity.setTime_stamp(cursor.getLong(offset + 0));
        entity.setHr_value(cursor.getInt(offset + 1));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(HeartData entity, long rowId) {
        entity.setTime_stamp(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(HeartData entity) {
        if(entity != null) {
            return entity.getTime_stamp();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(HeartData entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
