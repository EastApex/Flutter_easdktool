package com.example.easdktool.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.easdktool.db.MultiData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MULTI_DATA".
*/
public class MultiDataDao extends AbstractDao<MultiData, Long> {

    public static final String TABLENAME = "MULTI_DATA";

    /**
     * Properties of entity MultiData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property MotionType = new Property(0, int.class, "motionType", false, "MOTION_TYPE");
        public final static Property Begin_time_stamp = new Property(1, long.class, "begin_time_stamp", true, "_id");
        public final static Property End_time_stamp = new Property(2, long.class, "end_time_stamp", false, "END_TIME_STAMP");
        public final static Property Steps = new Property(3, int.class, "steps", false, "STEPS");
        public final static Property Calorie = new Property(4, int.class, "calorie", false, "CALORIE");
        public final static Property Distance = new Property(5, int.class, "distance", false, "DISTANCE");
        public final static Property Duration = new Property(6, int.class, "duration", false, "DURATION");
        public final static Property Training_effect_normal = new Property(7, int.class, "training_effect_normal", false, "TRAINING_EFFECT_NORMAL");
        public final static Property Training_effect_warmUp = new Property(8, int.class, "training_effect_warmUp", false, "TRAINING_EFFECT_WARM_UP");
        public final static Property Training_effect_fatconsumption = new Property(9, int.class, "training_effect_fatconsumption", false, "TRAINING_EFFECT_FATCONSUMPTION");
        public final static Property Training_effect_aerobic = new Property(10, int.class, "training_effect_aerobic", false, "TRAINING_EFFECT_AEROBIC");
        public final static Property Training_effect_anaerobic = new Property(11, int.class, "training_effect_anaerobic", false, "TRAINING_EFFECT_ANAEROBIC");
        public final static Property Training_effect_limit = new Property(12, int.class, "training_effect_limit", false, "TRAINING_EFFECT_LIMIT");
        public final static Property Average_heart_rate = new Property(13, int.class, "average_heart_rate", false, "AVERAGE_HEART_RATE");
        public final static Property Average_temperature = new Property(14, float.class, "average_temperature", false, "AVERAGE_TEMPERATURE");
        public final static Property Average_speed = new Property(15, int.class, "average_speed", false, "AVERAGE_SPEED");
        public final static Property Average_pace = new Property(16, int.class, "average_pace", false, "AVERAGE_PACE");
        public final static Property Average_step_freq = new Property(17, int.class, "average_step_freq", false, "AVERAGE_STEP_FREQ");
        public final static Property Average_stride = new Property(18, int.class, "average_stride", false, "AVERAGE_STRIDE");
        public final static Property Average_altitude = new Property(19, int.class, "average_altitude", false, "AVERAGE_ALTITUDE");
        public final static Property Average_heart_rate_max = new Property(20, int.class, "average_heart_rate_max", false, "AVERAGE_HEART_RATE_MAX");
        public final static Property Average_heart_rate_min = new Property(21, int.class, "average_heart_rate_min", false, "AVERAGE_HEART_RATE_MIN");
    }


    public MultiDataDao(DaoConfig config) {
        super(config);
    }
    
    public MultiDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MULTI_DATA\" (" + //
                "\"MOTION_TYPE\" INTEGER NOT NULL ," + // 0: motionType
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 1: begin_time_stamp
                "\"END_TIME_STAMP\" INTEGER NOT NULL ," + // 2: end_time_stamp
                "\"STEPS\" INTEGER NOT NULL ," + // 3: steps
                "\"CALORIE\" INTEGER NOT NULL ," + // 4: calorie
                "\"DISTANCE\" INTEGER NOT NULL ," + // 5: distance
                "\"DURATION\" INTEGER NOT NULL ," + // 6: duration
                "\"TRAINING_EFFECT_NORMAL\" INTEGER NOT NULL ," + // 7: training_effect_normal
                "\"TRAINING_EFFECT_WARM_UP\" INTEGER NOT NULL ," + // 8: training_effect_warmUp
                "\"TRAINING_EFFECT_FATCONSUMPTION\" INTEGER NOT NULL ," + // 9: training_effect_fatconsumption
                "\"TRAINING_EFFECT_AEROBIC\" INTEGER NOT NULL ," + // 10: training_effect_aerobic
                "\"TRAINING_EFFECT_ANAEROBIC\" INTEGER NOT NULL ," + // 11: training_effect_anaerobic
                "\"TRAINING_EFFECT_LIMIT\" INTEGER NOT NULL ," + // 12: training_effect_limit
                "\"AVERAGE_HEART_RATE\" INTEGER NOT NULL ," + // 13: average_heart_rate
                "\"AVERAGE_TEMPERATURE\" REAL NOT NULL ," + // 14: average_temperature
                "\"AVERAGE_SPEED\" INTEGER NOT NULL ," + // 15: average_speed
                "\"AVERAGE_PACE\" INTEGER NOT NULL ," + // 16: average_pace
                "\"AVERAGE_STEP_FREQ\" INTEGER NOT NULL ," + // 17: average_step_freq
                "\"AVERAGE_STRIDE\" INTEGER NOT NULL ," + // 18: average_stride
                "\"AVERAGE_ALTITUDE\" INTEGER NOT NULL ," + // 19: average_altitude
                "\"AVERAGE_HEART_RATE_MAX\" INTEGER NOT NULL ," + // 20: average_heart_rate_max
                "\"AVERAGE_HEART_RATE_MIN\" INTEGER NOT NULL );"); // 21: average_heart_rate_min
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MULTI_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MultiData entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getMotionType());
        stmt.bindLong(2, entity.getBegin_time_stamp());
        stmt.bindLong(3, entity.getEnd_time_stamp());
        stmt.bindLong(4, entity.getSteps());
        stmt.bindLong(5, entity.getCalorie());
        stmt.bindLong(6, entity.getDistance());
        stmt.bindLong(7, entity.getDuration());
        stmt.bindLong(8, entity.getTraining_effect_normal());
        stmt.bindLong(9, entity.getTraining_effect_warmUp());
        stmt.bindLong(10, entity.getTraining_effect_fatconsumption());
        stmt.bindLong(11, entity.getTraining_effect_aerobic());
        stmt.bindLong(12, entity.getTraining_effect_anaerobic());
        stmt.bindLong(13, entity.getTraining_effect_limit());
        stmt.bindLong(14, entity.getAverage_heart_rate());
        stmt.bindDouble(15, entity.getAverage_temperature());
        stmt.bindLong(16, entity.getAverage_speed());
        stmt.bindLong(17, entity.getAverage_pace());
        stmt.bindLong(18, entity.getAverage_step_freq());
        stmt.bindLong(19, entity.getAverage_stride());
        stmt.bindLong(20, entity.getAverage_altitude());
        stmt.bindLong(21, entity.getAverage_heart_rate_max());
        stmt.bindLong(22, entity.getAverage_heart_rate_min());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MultiData entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getMotionType());
        stmt.bindLong(2, entity.getBegin_time_stamp());
        stmt.bindLong(3, entity.getEnd_time_stamp());
        stmt.bindLong(4, entity.getSteps());
        stmt.bindLong(5, entity.getCalorie());
        stmt.bindLong(6, entity.getDistance());
        stmt.bindLong(7, entity.getDuration());
        stmt.bindLong(8, entity.getTraining_effect_normal());
        stmt.bindLong(9, entity.getTraining_effect_warmUp());
        stmt.bindLong(10, entity.getTraining_effect_fatconsumption());
        stmt.bindLong(11, entity.getTraining_effect_aerobic());
        stmt.bindLong(12, entity.getTraining_effect_anaerobic());
        stmt.bindLong(13, entity.getTraining_effect_limit());
        stmt.bindLong(14, entity.getAverage_heart_rate());
        stmt.bindDouble(15, entity.getAverage_temperature());
        stmt.bindLong(16, entity.getAverage_speed());
        stmt.bindLong(17, entity.getAverage_pace());
        stmt.bindLong(18, entity.getAverage_step_freq());
        stmt.bindLong(19, entity.getAverage_stride());
        stmt.bindLong(20, entity.getAverage_altitude());
        stmt.bindLong(21, entity.getAverage_heart_rate_max());
        stmt.bindLong(22, entity.getAverage_heart_rate_min());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 1);
    }    

    @Override
    public MultiData readEntity(Cursor cursor, int offset) {
        MultiData entity = new MultiData( //
            cursor.getInt(offset + 0), // motionType
            cursor.getLong(offset + 1), // begin_time_stamp
            cursor.getLong(offset + 2), // end_time_stamp
            cursor.getInt(offset + 3), // steps
            cursor.getInt(offset + 4), // calorie
            cursor.getInt(offset + 5), // distance
            cursor.getInt(offset + 6), // duration
            cursor.getInt(offset + 7), // training_effect_normal
            cursor.getInt(offset + 8), // training_effect_warmUp
            cursor.getInt(offset + 9), // training_effect_fatconsumption
            cursor.getInt(offset + 10), // training_effect_aerobic
            cursor.getInt(offset + 11), // training_effect_anaerobic
            cursor.getInt(offset + 12), // training_effect_limit
            cursor.getInt(offset + 13), // average_heart_rate
            cursor.getFloat(offset + 14), // average_temperature
            cursor.getInt(offset + 15), // average_speed
            cursor.getInt(offset + 16), // average_pace
            cursor.getInt(offset + 17), // average_step_freq
            cursor.getInt(offset + 18), // average_stride
            cursor.getInt(offset + 19), // average_altitude
            cursor.getInt(offset + 20), // average_heart_rate_max
            cursor.getInt(offset + 21) // average_heart_rate_min
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MultiData entity, int offset) {
        entity.setMotionType(cursor.getInt(offset + 0));
        entity.setBegin_time_stamp(cursor.getLong(offset + 1));
        entity.setEnd_time_stamp(cursor.getLong(offset + 2));
        entity.setSteps(cursor.getInt(offset + 3));
        entity.setCalorie(cursor.getInt(offset + 4));
        entity.setDistance(cursor.getInt(offset + 5));
        entity.setDuration(cursor.getInt(offset + 6));
        entity.setTraining_effect_normal(cursor.getInt(offset + 7));
        entity.setTraining_effect_warmUp(cursor.getInt(offset + 8));
        entity.setTraining_effect_fatconsumption(cursor.getInt(offset + 9));
        entity.setTraining_effect_aerobic(cursor.getInt(offset + 10));
        entity.setTraining_effect_anaerobic(cursor.getInt(offset + 11));
        entity.setTraining_effect_limit(cursor.getInt(offset + 12));
        entity.setAverage_heart_rate(cursor.getInt(offset + 13));
        entity.setAverage_temperature(cursor.getFloat(offset + 14));
        entity.setAverage_speed(cursor.getInt(offset + 15));
        entity.setAverage_pace(cursor.getInt(offset + 16));
        entity.setAverage_step_freq(cursor.getInt(offset + 17));
        entity.setAverage_stride(cursor.getInt(offset + 18));
        entity.setAverage_altitude(cursor.getInt(offset + 19));
        entity.setAverage_heart_rate_max(cursor.getInt(offset + 20));
        entity.setAverage_heart_rate_min(cursor.getInt(offset + 21));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MultiData entity, long rowId) {
        entity.setBegin_time_stamp(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MultiData entity) {
        if(entity != null) {
            return entity.getBegin_time_stamp();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MultiData entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
